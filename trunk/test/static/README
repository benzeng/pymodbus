#---------------------------------------------------------------------------# 
# Static Code Testing
#---------------------------------------------------------------------------# 
"Static code analysis" is the analysis of computer software that is performed
without actually executing programs built from that software
(analysis performed on executing programs is known as dynamic analysis).
In most cases the analysis is performed on some version of the source code
and in the other cases some form of the object code. The term is usually
applied to the analysis performed by an automated tool, with human analysis
being called program understanding or program comprehension.

Note: I run tests for all three incase a machine is missing one.

#---------------------------------------------------------------------------# 
# Tools
#---------------------------------------------------------------------------# 
PyChecker
	Finds problems that are typically caught by a compiler for less dynamic
	languages; imports each module before checking it

PyLint
	Includes PyChecker checks, plus more features, like checking line-code's
	length, checking if variable names are well-formed according to your
	coding standard, or checking if declared interfaces are truly implemented

PyFlakes
	Similar to PyChecker; focused on identifying common errors quickly without
	executing Python code; its primary advantage over PyChecker is that it is
	fast: it runs on most large projects in only a few seconds
